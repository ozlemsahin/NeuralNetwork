{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# STANDARTISIERUNG"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Imports\n",
    "import random\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Create Dataset\n",
    "#zufällig generierten Datenpunkte aus dem Bereich [100,300]x[0,2]\n",
    "Y_raw = np.ones(100)\n",
    "X1_raw = np.ones(200)\n",
    "X2_raw = np.ones(200)\n",
    "\n",
    "def randomForX1(X1_raw):\n",
    "    for i in range(0,200):\n",
    "        X1_raw[i] = random.uniform(100, 300)\n",
    "    return\n",
    "\n",
    "def randomForX2(X2_raw):\n",
    "    for i in range(0,200):\n",
    "        X2_raw[i] = random.uniform(0, 2)\n",
    "    return\n",
    "\n",
    "randomForX1(X1_raw)\n",
    "randomForX2(X2_raw)\n",
    "\n",
    "plt.scatter(X1_raw, X2_raw)\n",
    "plt.xlabel(\"x1\")\n",
    "plt.ylabel(\"x2\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 200)\n",
      "(1, 200)\n"
     ]
    }
   ],
   "source": [
    "#Reshape\n",
    "X1 = X1_raw.reshape(1,X1_raw.shape[0])\n",
    "X2 = X2_raw.reshape(1,X2_raw.shape[0])\n",
    "print(X1.shape)\n",
    "print(X2.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Standartizierung\n",
    "def standartizierung(X, M, ss):\n",
    "    X_stndrt = np.ones(200)\n",
    "    X_stndrt = X_stndrt.reshape(1,200)\n",
    "    \n",
    "    for i in range (0, 200):\n",
    "        X_stndrt[0,i] = (X[0,i] - M) / ss\n",
    "    return X_stndrt\n",
    "\n",
    "def mean(X):\n",
    "    summe = 0.0\n",
    "    for i in range (0, 200):\n",
    "        summe = X[0,i] + summe\n",
    "    return summe / 200\n",
    "\n",
    "def ss(X):\n",
    "    return statistics.stdev(X)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#standartizierung for x1\n",
    "x1_mean = mean(X1)\n",
    "x1_ss = ss(X1_raw) #list seklinde istiyor \n",
    "x1_standart = standartizierung(X1, x1_mean, x1_ss)\n",
    "\n",
    "#standartizierung for x2\n",
    "x2_mean = mean(X2)\n",
    "x2_ss = ss(X2_raw) #list seklinde istiyor \n",
    "x2_standart = standartizierung(X2, x2_mean, x2_ss)\n",
    "\n",
    "plt.scatter(x1_standart, x2_standart)\n",
    "plt.xlabel(\"x1\")\n",
    "plt.ylabel(\"x2\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
